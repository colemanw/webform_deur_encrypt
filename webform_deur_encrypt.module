<?php
/**
 * Created using PhpStorm.
 * User: Semper IT / KarinG
 * Date: 19-08-11
 *
 * Configuration:
 * CiviCRM Custom field:
 * varchar(500)
 * view Only
 */

function webform_deur_encrypt_webform_component_presave($component) {
  // This module is only looking for CiviCRM custom fields - example: civicrm_1_contact_1_cg7_custom_13
  if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
    if (!empty($component['encryption'])) {
      $component['extra'] = array_merge($component['extra'], $component['encryption']);
      if ($component['extra']['encrypt']) {
        // Encrypt ALL CiviCRM custom field data for this form_key
        webform_deur_encrypt_encryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
      else {
        // Decrypt ALL CiviCRM custom field data for this form_key
        webform_deur_encrypt_decryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
    }
  }
}

function webform_deur_encrypt_encryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Encrypt ALL CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
  } else {
    return;
  }

  $sql = "SELECT $column_name, entity_id FROM $table_name";
  $dao = CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
  while ( $dao->fetch( ) ) {
    $entityId = $dao->entity_id;
    $field = $dao->$column_name;
    if ($field != '') {
      // Use drupal encrypt module to encrypt
      if (!is_array(@unserialize($field))) {
        $field_value = encrypt($field, array('base64' => TRUE));
        $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
        CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
      }
    }
  }
}

function webform_deur_encrypt_decryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Decrypt ALL CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
  } else {
    return;
  }

  $sql = "SELECT $column_name, entity_id FROM $table_name";
  $dao = CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
  while ( $dao->fetch( ) ) {
    $entityId = $dao->entity_id;
    $field = $dao->$column_name;
    if ($field != '') {
      // Use drupal encrypt module to decrypt
      if (is_array(@unserialize($field))) {
        $field_value = decrypt($field, array('base64' => TRUE));
        $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
        CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
      }
    }
  }
}

function webform_deur_encrypt_civicrm_custom( $op, $groupID, $entityID, &$params ) {

  // This hook is called immediately AFTER a CiviCRM custom field is saved in the CiviCRM database
  if ( $op != 'create' && $op != 'edit' && substr($_POST['form_id'], 0, 7) != 'webform') {
    return;
  }

  $table_name = $params[0]['table_name'];
  $column_name = $params[0]['column_name'];
  $explode_form_id = explode("_", $_POST['form_id']);
  $nid =  $explode_form_id[3];

  $node = node_load($nid);
  $node->webform['components'];

  // Check all webform components
  foreach ($node->webform['components'] as $component) {
    // Check to see if we we have CiviCRM custom fields
    if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
      // Check to see if the CiviCRM custom field is configured to be Encrypted
      if ($component['extra']['encrypt']) {
        $field = $params[0]['value'];
        $entityId = $params[0]['entity_id'];
        // Use drupal encrypt module to encrypt
        if (!is_array(@unserialize($field))) {
          $field_value = encrypt($field, array('base64' => TRUE));
          $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
          CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
        }
      }
    }
  }
}

function webform_deur_encrypt_form_alter( &$form, &$form_state, $form_id ){
  // This hook is to decrypt the value of the CiviCRM custom field on the webform

  if (substr($form_id, 0, 7) != 'webform') {
    return;
  }

  if ($form_id == 'webform_component_edit_form' | $form_id == 'webform_components_form') {
    return;
  }

  // We only want decrypt CiviCRM custom values on initial webform form load
  if (isset($form_state['input']['op']) && $form_state['input']['op'] == 'Submit') {
    return;
  }

  // Check all webform components
  foreach ($form['#node']->webform['components'] as $component) {
    // Check to see if we we have CiviCRM custom fields
    if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
      // Check to see if the CiviCRM custom field is configured to be Encrypted
      if ($component['extra']['encrypt']) {
        // Find it and decrypt it before showing it on the form

        // Rob's haystack code snippet
        $haystack = &$form['submitted'];
        $path = keyfinder($haystack, $component['form_key']);
        // Turn the path into a reference to the right key in the haystack.
        if (!empty($path)) {
          $cg_custom = &$haystack;
          foreach ($path as $key) {
            $cg_custom = &$cg_custom[$key];
          }
        }

        // Use drupal encrypt module to decrypt
        if (is_array(@unserialize($cg_custom['#default_value']))) {
          $cg_custom['#default_value'] = decrypt($cg_custom['#default_value'], array('base64' => TRUE));
        }
      }
    }
  }
}

function webform_deur_encrypt_extract($form_key) {
  // Extract $table_name and $column_name from $form_key - example: civicrm_1_contact_1_cg7_custom_13
  $form_key_pieces = explode("_", $form_key);
  $groupID = substr($form_key_pieces[4], 2);
  $fieldID = $form_key_pieces[6];

  $result = civicrm_api3('CustomGroup', 'get', [
    'return' => ["table_name"],
    'id' => $groupID,
  ]);
  if ($result['is_error'] == 0) {
    $table_name = $result['values'][$groupID]['table_name'];
  } else {
    return array();
  }

  $result = civicrm_api3('CustomField', 'get', [
    'return' => ["column_name"],
    'id' => $fieldID,
  ]);
  if ($result['is_error'] == 0) {
    $column_name = $result['values'][$fieldID]['column_name'];
  } else {
    return array();
  }

  return array($table_name, $column_name);
}

/**
 * RE - Find a key in an array tree.
 * Returns array of parent keys + target key.
 * E.g.: ['level_1', 'level_2', 'target_key']
 */
function keyfinder($a, $target_key, &$path = [], &$found = false) {
  foreach ($a as $k => $v) {
    if ($target_key === $k) {
      $path[] = $k;
      $found = true;
      break;
    }
    elseif (is_array($v)) {
      $path[] = $k;
      keyfinder($v, $target_key, $path, $found);
      if ($found) {
        break;
      }
      else {
        array_pop($path);
      }
    }
  }
  return $path;
}
