<?php
/**
 * Created using PhpStorm.
 * User: Semper IT / KarinG
 * Date: 19-08-11
 */

function webform_deur_encrypt_webform_component_presave($component) {
  // This module is only looking for CiviCRM custom fields - example: civicrm_1_contact_1_cg7_custom_13
  if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
    if (!empty($component['encryption'])) {
      $component['extra'] = array_merge($component['extra'], $component['encryption']);
      if ($component['extra']['encrypt']) {
        // Encrypt ALL CiviCRM custom field data for this form_key
        webform_deur_encrypt_encryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
      else {
        // Decrypt ALL CiviCRM custom field data for this form_key
        webform_deur_encrypt_decryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
    }
  }
}

function webform_deur_encrypt_encryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Encrypt ALL CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
  } else {
    return;
  }

  require_once 'CRM/Utils/Crypt.php';

  $sql = "SELECT $column_name, entity_id FROM $table_name";
  $dao = CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
  while ( $dao->fetch( ) ) {
    $entityId = $dao->entity_id;
    $field = $dao->$column_name;
    if ($field != '') {
      // Check if field is not already encrypted
      if (substr($field, 0, 7) != 'encrypt') {
        // KG - Todo: replace with drupal encrypt module
        $field_value = 'encrypt-' . CRM_Utils_Crypt::encrypt($field);
        $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
        CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
      }
    }
  }
}

function webform_deur_encrypt_decryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Decrypt ALL CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
  }
  else {
    return;
  }

  require_once 'CRM/Utils/Crypt.php';

  $sql = "SELECT $column_name, entity_id FROM $table_name";
  $dao = CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
  while ( $dao->fetch( ) ) {
    $entityId = $dao->entity_id;
    $field = $dao->$column_name;
    if ($field != '') {
      // Check if field is indeed encrypted
      if (substr($field, 0, 7) == 'encrypt') {
        // KG - Todo: replace with drupal encrypt module
        $field_value = CRM_Utils_Crypt::decrypt(substr($field, 8));
        $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
        CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
      }
    }
  }
}

function webform_deur_encrypt_civicrm_custom( $op, $groupID, $entityID, &$params ) {

  if ( $op != 'create' && $op != 'edit' && substr($_POST['form_id'], 0, 7) != 'webform') {
    return;
  }

  $table_name = $params[0]['table_name'];
  $column_name = $params[0]['column_name'];
  $explode_form_id = explode("_", $_POST['form_id']);
  $nid =  $explode_form_id[3];

  $node = node_load($nid);
  $node->webform['components'];

  // Check all webform components
  foreach ($node->webform['components'] as $component) {
    // Check to see if we we have CiviCRM custom fields
    if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
      // Check to see if the CiviCRM custom field is configured to be Encrypted
      if ($component['extra']['encrypt']) {

        require_once 'CRM/Utils/Crypt.php';

        $field = $params[0]['value'];
        $entityId = $params[0]['entity_id'];
        // KG - check if field is not already encrypted
        if (substr($field, 0, 7) != 'encrypt') {
          // KG - Todo: replace with drupal encrypt module
          $field_value = 'encrypt-' . CRM_Utils_Crypt::encrypt($field);
          $sql = "UPDATE $table_name SET $column_name = '$field_value' WHERE entity_id=$entityId";
          CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
        }

      }
    }
  }
}

function webform_deur_encrypt_form_alter( &$form, &$form_state, $form_id ){

  if (isset($form['#node'])) {
    if ($form['#node']->type != 'webform') {
      return;
    }
  }

  if ($form_id == 'webform_component_edit_form' | $form_id == 'webform_components_form') {
    return;
  }

  // We only want decrypt CiviCRM custom values on initial webform form load
  if (isset($form_state['input']['op'])) {
    if ($form_state['input']['op'] == 'Submit') {
      return;
    }
  }

  // Check all webform components
  foreach ($form['#node']->webform['components'] as $component) {
    // Check to see if we we have CiviCRM custom fields
    if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
      // Check to see if the CiviCRM custom field is configured to be Encrypted
      if ($component['extra']['encrypt']) {
        // Find it and decrypt it before showing it on the form

        require_once 'CRM/Utils/Crypt.php';

        // KG - ToDo: use Rob's haystack code snippet instead
        foreach($form['submitted'] as $key_sub => $sub) {
          if ($key_sub == $component['form_key']) {
            // One level down
            if (substr($form['submitted'][$component['form_key']]['#default_value'], 0, 7) == 'encrypt') {
              $field_value = CRM_Utils_Crypt::decrypt(substr($form['submitted'][$component['form_key']]['#default_value'], 8));
              $form['submitted'][$component['form_key']]['#default_value'] = $field_value;
            }
          }
          if (is_array($sub)) {
            foreach($sub as $key_subsub => $subsub) {
              if ($key_subsub == $component['form_key']) {
                // Two levels down
                if (substr($form['submitted'][$key_sub][$component['form_key']]['#default_value'], 0, 7) == 'encrypt') {
                  $field_value = CRM_Utils_Crypt::decrypt(substr($form['submitted'][$key_sub][$component['form_key']]['#default_value'], 8));
                  $form['submitted'][$key_sub][$component['form_key']]['#default_value'] = $field_value;
                }
              }
            }
          }
        }
      }
    }
  }
}

function webform_deur_encrypt_extract($form_key) {
  // Extract $table_name and $column_name from $form_key - example: civicrm_1_contact_1_cg7_custom_13
  $form_key_pieces = explode("_", $form_key);
  $groupID = substr($form_key_pieces[4], 2);
  $fieldID = $form_key_pieces[6];

  $result = civicrm_api3('CustomGroup', 'get', [
    'return' => ["table_name"],
    'id' => $groupID,
  ]);
  if ($result['is_error'] == 0) {
    $table_name = $result['values'][$groupID]['table_name'];
  } else {
    return array();
  }

  $result = civicrm_api3('CustomField', 'get', [
    'return' => ["column_name"],
    'id' => $fieldID,
  ]);
  if ($result['is_error'] == 0) {
    $column_name = $result['values'][$fieldID]['column_name'];
  } else {
    return array();
  }

  return array($table_name, $column_name);
}
