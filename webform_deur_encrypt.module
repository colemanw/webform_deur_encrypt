<?php
/**
 * Created using PhpStorm.
 * User: Semper IT / KarinG
 * Date: 19-08-11
 */

function webform_deur_encrypt_webform_component_presave($component) {
  // This module is only looking for CiviCRM custom fields
  // Example: $form_key - example: civicrm_1_contact_1_cg1_custom_1
  if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
    if (!empty($component['encryption'])) {
      $component['extra'] = array_merge($component['extra'], $component['encryption']);
      if ($component['extra']['encrypt']) {
        // Encrypt all CiviCRM custom field data for this form_key
        webform_deur_encrypt_encryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
      else {
        // Decrypt all CiviCRM custom field data for this form_key
        webform_deur_encrypt_decryption($component['nid'], $component['cid'], $component['extra'], $component['form_key']);
      }
    }
  }
}

function webform_deur_encrypt_encryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Encrypt all CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
    $fieldID = $tablecolumn[2];
  } else {
    return;
  }

  require_once 'CRM/Utils/Crypt.php';

  $customId = 'custom_' . $fieldID;

  // KG - a bit inefficient: pulling up all Contacts
  $result = civicrm_api3('Contact', 'get', [
    'sequential' => 1,
    'return' => $customId,
    'options' => array(
      'limit' => 0,
    ),
  ]);

  foreach ($result['values'] as $customField) {
    if ($customField[$customId]) {
      // KG - check if field is not already encrypted
      if (substr($customField[$customId], 0, 7) != 'encrypt') {
        // KG - Todo: replace with drupal encrypt module
        $field_value = 'encrypt-' . CRM_Utils_Crypt::encrypt($customField[$customId]);
        $result = civicrm_api3( 'CustomValue', 'create', [
          'entity_id' => $customField['contact_id'],
          'custom_' . $fieldID => $field_value,
        ]);
      }
    }
  }
}

function webform_deur_encrypt_decryption($nid = NULL, $cid = NULL, $extra = array(), $form_key = NULL) {
  // Decrypt all CiviCRM custom field data for this form_key

  $tablecolumn = webform_deur_encrypt_extract($form_key);
  if (!empty($tablecolumn)) {
    $table_name = $tablecolumn[0];
    $column_name = $tablecolumn[1];
    $fieldID = $tablecolumn[2];
  }
  else {
    return;
  }

  require_once 'CRM/Utils/Crypt.php';

  $customId = 'custom_' . $fieldID;

  // KG - a bit inefficient: pulling up all Contacts
  $result = civicrm_api3('Contact', 'get', [
    'sequential' => 1,
    'return' => $customId,
    'options' => array(
      'limit' => 0,
    ),
  ]);

  foreach ($result['values'] as $customField) {
    if ($customField[$customId]) {
      // KG - check if field is indeed encrypted
      if (substr($customField[$customId], 0, 7) == 'encrypt') {
         // KG - Todo: replace with drupal encrypt module
        $field_value = CRM_Utils_Crypt::decrypt(substr($customField[$customId], 8));
        $result = civicrm_api3('CustomValue', 'create', [
          'entity_id' => $customField['contact_id'],
          'custom_' . $fieldID => $field_value,
        ]);
      }
    }
  }
}

function webform_deur_encrypt_civicrm_custom( $op, $groupID, $entityID, &$params ) {

  // KG - Todo: for now - ALWAYS encrypts - regardless of webform component setting;
  $test = 1;
  // return;

  if ( $op != 'create' && $op != 'edit' ) {
    return;
  }

  require_once 'CRM/Utils/Crypt.php';

  // KG - short cut for now. Not that difficult to rewrite as the params contain the table_name and column_name
  if ($params[0]['table_name'] == 'civicrm_value_thealex_7' && $params[0]['column_name'] == 'alexid_13') {
    if (substr($params[0]['value'], 0, 7) != 'encrypt') {
      // KG - Todo: replace with drupal encrypt module
      $encField = 'encrypt-' . CRM_Utils_Crypt::encrypt($params[0]['value']);
      $sql = "UPDATE civicrm_value_thealex_7 SET alexid_13 = '$encField' WHERE entity_id=$entityID";
      CRM_Core_DAO::executeQuery($sql, CRM_Core_DAO::$_nullArray);
    }
  }
}

function webform_deur_encrypt_form_alter( &$form, &$form_state, $form_id ){

  if ($form['#node']->type != 'webform') {
    return;
  }

  if ($form_id == 'webform_component_edit_form' | $form_id == 'webform_components_form') {
    return;
  }

  // KG - We only want decrypt CiviCRM custom values on initial form load
  if ($form_state['input']['op'] == 'Submit') {
    return;
  }

  // KG - Check all webform components
  foreach ($form['#node']->webform['components'] as $component) {
    // KG - Check to see if we we have CiviCRM custom fields
    if (substr($component['form_key'], 0, 7) == 'civicrm' && preg_match('/_custom/', $component['form_key'], $matches)) {
      // KG - Check to see if the CiviCRM custom field is configured to be Encrypted
      if ($component['extra']['encrypt']) {
        // KG - Find it and decrypt it before showing it on the form

        require_once 'CRM/Utils/Crypt.php';

        foreach($form['submitted'] as $key_sub => $sub) {
          if ($key_sub == $component['form_key']) {
            // KG - only one level down
            $form['submitted'][$component['form_key']]['#default_value'];
            if (substr($form['submitted'][$component['form_key']]['#default_value'], 0, 7) == 'encrypt') {
              $field_value = CRM_Utils_Crypt::decrypt(substr($form['submitted'][$component['form_key']]['#default_value'], 8));
              $form['submitted'][$component['form_key']]['#default_value'] = $field_value;
            }
          }
          if (is_array($sub)) {
            foreach($sub as $key_subsub => $subsub) {
              if ($key_subsub == $component['form_key']) {
                // KG - two levels down
                $form['submitted'][$key_sub][$component['form_key']]['#default_value'];
                if (substr($form['submitted'][$key_sub][$component['form_key']]['#default_value'], 0, 7) == 'encrypt') {
                  $field_value = CRM_Utils_Crypt::decrypt(substr($form['submitted'][$key_sub][$component['form_key']]['#default_value'], 8));
                  $form['submitted'][$key_sub][$component['form_key']]['#default_value'] = $field_value;
                }
              }
            }
          }
        }
      }
    }
  }
}

function webform_deur_encrypt_extract($form_key) {
  // Extract $table_name and $column_name from $form_key - example: civicrm_1_contact_1_cg7_custom_13
  $form_key_pieces = explode("_", $form_key);
  $groupID = substr($form_key_pieces[4], 2);
  $fieldID = $form_key_pieces[6];

  $result = civicrm_api3('CustomGroup', 'get', [
    'return' => ["table_name"],
    'id' => $groupID,
  ]);
  if ($result['is_error'] == 0) {
    $table_name = $result['values'][$groupID]['table_name'];
  } else {
    return array();
  }

  $result = civicrm_api3('CustomField', 'get', [
    'return' => ["column_name"],
    'id' => $fieldID,
  ]);
  if ($result['is_error'] == 0) {
    $column_name = $result['values'][$fieldID]['column_name'];
  } else {
    return array();
  }

  return array($table_name, $column_name, $fieldID);
}
